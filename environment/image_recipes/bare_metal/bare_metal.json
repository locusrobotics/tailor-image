{

  "variables": {
    "image_name": "tailor_bot",

    "organization": "",
    "bundle_track": "hotdog",
    "bundle_version": "hotdog",
    "distribution": "",

    "username": "tailor",
    "password": "tailor",

    "ansible_command": "ansible-playbook",
    "extra_arguments_ansible": "-e package=tailor-image",
    "playbook_file": "bare_metal.yaml",
    "inventory": "/mnt/bare_metal,",

    "s3_bucket": "tailor-artifacts",
    "disk_size": "15",

    "iso_image": ""
  },

  "builders": [
    {
      "type": "qemu-chroot",
      "source_image": "{{user `iso_image`}}",
      "image_name": "{{user `image_name`}}.qcow2",
      "compression": true,
      "output_directory": "images",
      "mount_path": "/mnt/bare_metal",
      "copy_files": []
    }
  ],

  "provisioners": [
    {
      "type": "shell",
      "inline": [
          "mv /etc/resolv.conf /etc/resolv.conf.old",
          "echo \"nameserver 1.1.1.1\" > /etc/resolv.conf",
          "echo \"unnamedrobot\" > /etc/hostname",
          "apt-get update && apt-get install -yq python3 sudo openssl openssh-server"
      ]
    },

    {
      "type": "shell",
      "inline": [
        "groupadd {{user `username`}}",
        "useradd -ms /bin/bash -p $(echo \"{{user `password`}}\" | openssl passwd -1 -stdin) -g {{user `username`}} -G sudo {{user `username`}}",
        "echo \"{{user `username`}} ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers",
        "mkdir -p /home/{{user `username`}}",
        "usermod -d /home/{{user `username`}} {{user `username`}}"
      ]
    },

    {
      "type": "ansible",
      "user": "{{user `username`}}",
      "command": "{{user `ansible_command`}}",
      "playbook_file": "{{user `playbook_file`}}",
      "extra_arguments": [
        "--connection=chroot",
        "{{ user `extra_arguments_ansible` }}",
        "-e ansible_user={{user `username`}}",
        "-e organization={{user `organization`}}",
        "-e bundle_track={{user `bundle_track`}}",
        "-e bundle_version={{user `bundle_version`}}",
        "-e image_name={{user `image_name`}}",
        "--inventory={{user `inventory`}}"
      ]
    },

    {
      "type": "shell",
      "inline": [
          "echo 'Reconfigure openssh server and restore resolv.conf'",
          "dpkg-reconfigure openssh-server",
          "mv /etc/resolv.conf.old /etc/resolv.conf",

          "echo 'Remove machine-id to ensure we get a unique one for each machine'",
          "rm -f /etc/machine-id /var/lib/dbus/machine-id",

          "echo 'Add image version file to image'",
          "echo '{\"active_version\": \"{{ user `image_name` }}\"}' | tee -a /home/{{ user `username` }}/.ota.json",

          "echo 'Fix permissions in the home directory'",
          "chown -R {{ user `username` }}:{{ user `username` }} /home/{{ user `username` }}",

          "echo 'Remove unused space on the image'",
          "dd if=/dev/zero of=/EMPTY bs=1M || true",
          "rm -f /EMPTY && sync"
      ]
    }
  ],

  "post-processors": [
    {
      "type": "shell-local",
      "inline": [
          "echo 'Checking nbd status'",
          "ls -l /dev/nbd0",
          "sleep 20",
          "ls -l /dev/nbd*",
          "echo 'Resize image'",
          "qemu-nbd -c /dev/nbd0 images/{{user `image_name`}}.qcow2",
          "e2fsck -y -f /dev/nbd0p1",
          "resize2fs /dev/nbd0p1 -M",
          "qemu-nbd -d /dev/nbd0",
          "qemu-img resize --shrink images/{{user `image_name`}}.qcow2 {{user `disk_size`}}G",

          "echo 'Converting image to RAW...'",
          "qemu-img convert images/{{user `image_name`}}.qcow2 images/{{user `image_name`}}.raw",
          "rm -f images/{{user `image_name`}}.qcow2",

          "echo 'Compressing generated image...'",
          "xz -k images/{{user `image_name`}}.raw -c --verbose --threads=0 > images/{{user `image_name`}}.raw.xz",
          "rm -f images/{{user `image_name`}}.raw",

          "echo 'Uploading compressed image to S3...'",
          "aws s3 cp images/{{user `image_name`}}.raw.xz s3://{{user `s3_bucket`}}/{{user `bundle_version`}}/images/",
          "md5sum images/{{user `image_name`}}.raw.xz > /tmp/{{user `image_name`}}",
          "rm -f images/{{user `image_name`}}.raw.xz",

          "echo 'Removing generated images...'",
          "rm -rf images"
      ]
    }
  ]

}
